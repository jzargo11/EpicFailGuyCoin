{"version":3,"sources":["EFG.jpg","EFGBURN.gif","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Main","Component","constructor","props","super","this","state","output","currentForm","render","id","src","EfgPic","EfgGif","App","loading","content","className","role","style","maxWidth","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0KAAe,G,KAAA,IAA0B,iCCA1B,MAA0B,oCCKzC,MAAMA,UAAaC,YAEjBC,YAAYC,GACVC,MAAMD,GACNE,KAAKC,MAAQ,CACXC,OAAQ,IACRC,YAAa,QAIjBC,SACE,OAEA,yBAAKC,GAAG,WAGJ,4BAAI,oDACJ,6BACA,sEAEA,yBAAKC,IAAOC,IAEZ,6BATJ,IASc,6BATd,IASwB,6BAEpB,4BAAI,4CACJ,4BACE,iEACA,uDACA,+DACA,8EACA,uGAKF,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAC/D,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAAS,6BAG/D,4BAAI,+CAEJ,yBAAKD,IAAOE,IAEZ,6BAAS,6BAAS,6BAElB,4BAAI,yDACJ,+BASOb,Q,KCxDf,MAAMc,UAAYb,YAEdC,YAAYC,GACZC,MAAMD,GACNE,KAAKC,MAAQ,CAEXS,SAAS,GAKXN,SACA,IAAIO,EAOJ,OALEA,EADCX,KAAKC,MAAMS,QACF,uBAAGL,GAAG,SAASO,UAAU,eAAzB,cAEA,kBAAC,EAAD,MAIV,6BACE,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,OACb,0BAAMC,KAAK,OAAOD,UAAU,4BAA4BE,MAAO,CAAEC,SAAU,UACzE,yBAAKH,UAAU,2BAEZD,QAYFF,QC9BKO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OAAO,kBAAC,EAAD,MAASkB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,iB","file":"static/js/main.d33035a3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/EFG.2bd70921.jpg\";","export default __webpack_public_path__ + \"static/media/EFGBURN.79663543.gif\";","import React, { Component } from 'react'\r\nimport EfgPic from '../EFG.jpg'\r\nimport EfgGif from '../EFGBURN.gif'\r\n\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      output: '0',\r\n      currentForm: 'load'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n    <div id=\"content\">\r\n\r\n\r\n        <h1><b> Epic Fail Guy Coin </b></h1>\r\n        <br></br>\r\n        <h2> This coin is going to zero. Buy Now! </h2>\r\n        \r\n        <img src = {EfgPic} />\r\n        \r\n        <br></br> <br></br> <br></br>\r\n       \r\n        <h1><b> Tokenomics </b></h1>\r\n        <ul>\r\n          <li>Initial supply of 21,000,000 EFGC</li>\r\n          <li>%1 Burn on transactions</li>\r\n          <li>Burns until 100,000 EFGC remain</li>\r\n          <li>10,000,000 EFGC to be sold on public exchanges</li>\r\n          <li>10,000,000 EFGC allocated to private sale at fixed rate of 0.0002 ETH </li>\r\n               \r\n        </ul>\r\n\r\n        \r\n        <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\r\n        <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\r\n        \r\n\r\n        <h1><b> DEFLATIONARY! </b></h1>\r\n\r\n        <img src = {EfgGif} />\r\n\r\n        <br></br><br></br><br></br>\r\n\r\n        <h3><b> Private Sale Coming Soon</b></h3>\r\n        <br></br>\r\n\r\n\r\n</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react'\nimport Main from './Main'\nimport './App.css'\n\nclass App extends Component {\n\n    constructor(props) {\n    super(props)\n    this.state = {\n\n      loading: false\n    }\n\n  }\n  \n    render() {\n    let content\n    if(this.state.loading) {\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\n    } else {\n      content = <Main/>\n    }\n\n    return (\n      <div>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n\n                {content}\n\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}